// массив это список.возможность хранить колекцию однотипных данных.
// не бывают массиов в которых хранится число, строка итд.
// массив открывается квадратными скобками


// снизу массив из одного элемента
// const friends = ["Mango"];
// console.log(friends);

// индекс манго 0 киви 1 поли 2 аякс 3 в консоли
// массив это набор ячеек памяти. массив это указатель на какой-то набор ячеек памяти
// const friends = ["Mango", "Kiwi", "Poly", "Ajax"];
// console.table(friends);

// // чтобы обратиться к элементу массива пишем переменную в которой находится массив.
// //  после этого ставим квадратные скобочки внутрь которых ставим индекс элемента к которому хотим обратиться.
// // на место этого вызова будет возвращено значение
// // в консоль выводится манго
// console.log(friends[0])

// const lastIndex = friends.length - 1;
// console.log(lastIndex)


// const friends = ["Mango", "Kiwi", "Poly", "Ajax"];
// console.table(friends);
// // как перезаписать массив
// friends[1] = "im not kiwi"
// console.log(friends);


// примитивы и сложные типы
// в консоли
// 10
// 10
// 20
// 10
// при обновлении одной ячейки вторая не обновляется. но обновление должно быть за консоль лог.
// это передача по значению


// let a = 10;
// let b = a;

// console.log(a);
// console.log(b);

// a = 20

// console.log(a);
// console.log(b);


// передача по ссылке. в переменной а сейчас сложный тип, массив.
// когда вы создаете сложный тип (массив, обект, функцию) под нее отдельно где-то выделяется место в памяти.
// к нему не привязана переменная в нашем случае(а).
// затем создается переменная и внутри ячейки памяти с переменной а хранится не сам массив, а указатель(ссылка на массив)


// const a = [1, 2, 3]


// // когда я пишу b = a это делает новую ячейку в памяти, где будет лежать переменная b и то что она туда копирует.
// // (она копирует ссылку с переменной а)
// const b = a;

// console.log("a", a)
// console.log("b", b)


// // что произошло при операции ниже ?
// //     оно заходит в ячейку памяти(а) у которой есть ссылка на массив.находит наш массив[1, 2, 3]
// //     берет у него нулевой элемент и меняет его на 500
    
// a[0] = 500;

// console.log("a", a)
// console.log("b", b)

// // за этой консолью (которая выше) будет 500 вместо 1. за консолью на 67 строке останется 1 потому что  a[0] = 500; указано после первой консоли



// // в консоли тру. они равны
// console.log(a === b)


// // false. одинаковые массивы но разные ячейки памяти. да, одинаковые элементы, но разные ячейки памяти
// // массивы сравниваются по месту в памяти.
// //     но к примеру числа сравниваются по значению
// console.log([1, 2, 3] === [1, 2, 3]);


// ИТОГ примитивы передаются по значению. делется точная копия и никак не связаны. + примитивы сравниваются по значению. 5 = 5
// сложные типы передаются по ссылке. сравниваются под адресу. поэтому два разных массива никогда не будут равны друг друг





// i является переменной счетчика for. можно использовать что угодно вместо этого
// friends[i] - адрес ячейки и место в памяти.не целового массива, а элемента этого массива и этот элемент мы изменяем
// добавляя в консоли к нему - 1
// если нам необходим индекс или необходимо изменить элемент массива мы используем цикл for


// const friends = ["Mango", "Kiwi", "Poly", "Ajax"];
// console.table(friends);
// const lastIndex = friends.length - 1;
// for (let i = 0; i <= lastIndex; i += 1) {
//     friends[i] += "-1";
// }



//  console.table(friends)




// там где iterable нужно написать элемент итерируегомог обьекта. ставим friends
// на месте variable пишем имя локальной переменнойю должно быть в одиночном числе. в нашем случае friend.
// for (const variable of iterable) {
    // пишем локальную переменную доступную только внутри этих скобок
// }



// for of пройти еще раз. ниже записи про это нет
// используется в задачах где не нужен индекс или не нужно изменять элемент массива










// задачи с рпептой
// что мы сделали в итоге ? перебрали в цикле и получили доступ к каждому элементу,
//     создали общий тотал, на кажой литерации добавили cart i к тоталу
// после цикла вывели в консоль

// const cart = [54, 28, 105, 70, 92, 17, 120, 12, 25, 90];
// // сделали переменную тотал до цикла
// let total = 0;

// // перебираем массив
// // в консоли все числа из массива друг под другом
// for (let i = 0; i < cart.length; i += 1) {
   

//     total = total + cart[i];
// }
// console.log("Total:",total);



// аналог записи выше
// const cart = [54, 28, 105, 70, 92, 17, 120, 12, 25, 90];
// let total = 0;
// for (const value of cart) {
//     total += value;
// }

// console.log("Total: ", total)




const cart = [54, 28, 105, 70, 92, 17, 120, 12, 25, 90];
for (let i = 0; i, cart.length; i += 1) {
    
}
console.log(cart)